{
  "version": 4,
  "terraform_version": "1.6.4",
  "serial": 2150,
  "lineage": "83df32cf-0c3e-eb68-7a82-4b203293adc8",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "google_compute_firewall",
      "name": "all",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "allow": [
              {
                "ports": [
                  "0-65535"
                ],
                "protocol": "tcp"
              }
            ],
            "creation_timestamp": "2024-02-07T03:34:58.201-08:00",
            "deny": [],
            "description": "",
            "destination_ranges": [],
            "direction": "INGRESS",
            "disabled": false,
            "enable_logging": null,
            "id": "projects/csb-2023/global/firewalls/allow-all",
            "log_config": [],
            "name": "allow-all",
            "network": "https://www.googleapis.com/compute/v1/projects/csb-2023/global/networks/rabbitmq-network",
            "priority": 1000,
            "project": "csb-2023",
            "self_link": "https://www.googleapis.com/compute/v1/projects/csb-2023/global/firewalls/allow-all",
            "source_ranges": [
              "0.0.0.0/0"
            ],
            "source_service_accounts": null,
            "source_tags": null,
            "target_service_accounts": null,
            "target_tags": null,
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "google_compute_network.vpc_network"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "client",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": null,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "enable_confidential_compute": false,
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2204-jammy-v20231030",
                    "labels": {},
                    "provisioned_iops": 0,
                    "provisioned_throughput": 0,
                    "resource_manager_tags": null,
                    "size": 40,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/csb-2023/zones/europe-west3-c/disks/client"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "effective_labels": {},
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/csb-2023/zones/europe-west3-c/instances/client",
            "instance_id": "5687245364062508045",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "e2-highcpu-16",
            "metadata": null,
            "metadata_fingerprint": "xd0oMFNNP1U=",
            "metadata_startup_script": "export DEBIAN_FRONTEND=noninteractive\nsudo apt update -y -q\nsudo apt-get upgrade -y\n\nsudo apt-get remove needrestart -y \n\n\n# Install Java \nsudo apt install openjdk-11-jre-headless -y\n\n# Get benchmarking tool\ngit clone https://github.com/FuratH/rabbitmq-benchmark-2024.git\n\n\n\ntouch /done\n",
            "min_cpu_platform": "",
            "name": "client",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "35.198.98.247",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "internal_ipv6_prefix_length": 0,
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "ipv6_address": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/csb-2023/global/networks/rabbitmq-network",
                "network_ip": "10.156.0.2",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/csb-2023/regions/europe-west3/subnetworks/rabbitmq-network",
                "subnetwork_project": "csb-2023"
              }
            ],
            "network_performance_config": [],
            "params": [],
            "project": "csb-2023",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "instance_termination_action": "",
                "local_ssd_recovery_timeout": [],
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/csb-2023/zones/europe-west3-c/instances/client",
            "service_account": [
              {
                "email": "57939934652-compute@developer.gserviceaccount.com",
                "scopes": [
                  "https://www.googleapis.com/auth/cloud-platform"
                ]
              }
            ],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": null,
            "tags_fingerprint": "42WmSpB8rSM=",
            "terraform_labels": {},
            "timeouts": null,
            "zone": "europe-west3-c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_network.vpc_network"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "loadbalancer",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": null,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "enable_confidential_compute": false,
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2204-jammy-v20231030",
                    "labels": {},
                    "provisioned_iops": 0,
                    "provisioned_throughput": 0,
                    "resource_manager_tags": null,
                    "size": 40,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/csb-2023/zones/europe-west3-c/disks/loadbalancer"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "AMD Rome",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "effective_labels": {},
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/csb-2023/zones/europe-west3-c/instances/loadbalancer",
            "instance_id": "3337705606687413260",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "e2-standard-2",
            "metadata": null,
            "metadata_fingerprint": "HExCiyN6Dw0=",
            "metadata_startup_script": "#!/bin/bash\n\nsudo apt update -y -q\n\n\n# open ports \nsudo ufw allow 15672/tcp\nsudo ufw allow 5672/tcp\nsudo ufw allow 4369/tcp\nsudo ufw allow 25672/tcp\nsudo ufw allow 15692/tcp\nsudo ufw reload\nsudo ufw allow proto tcp from any to any port 5672,15672,15692\n\n\n# Install Nginx for loadbalancing\nsudo apt-get install nginx -y -q\n\n\n# Replace nginx config \n# If more then 3 nodes are needed, they have to be registered here\n\n\n\n# Backup the original nginx.conf file\nsudo cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak\n\ngit clone https://github.com/FuratH/rabbitmq-benchmark-2024.git\n\nsudo cat rabbitmq-benchmark-2024/loadbalancer/nginx.conf \u003e /etc/nginx/nginx.conf\n \n\nsudo nginx -s reload\n",
            "min_cpu_platform": "",
            "name": "loadbalancer",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "34.159.113.131",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "internal_ipv6_prefix_length": 0,
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "ipv6_address": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/csb-2023/global/networks/rabbitmq-network",
                "network_ip": "10.156.0.3",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/csb-2023/regions/europe-west3/subnetworks/rabbitmq-network",
                "subnetwork_project": "csb-2023"
              }
            ],
            "network_performance_config": [],
            "params": [],
            "project": "csb-2023",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "instance_termination_action": "",
                "local_ssd_recovery_timeout": [],
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/csb-2023/zones/europe-west3-c/instances/loadbalancer",
            "service_account": [],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": null,
            "tags_fingerprint": "42WmSpB8rSM=",
            "terraform_labels": {},
            "timeouts": null,
            "zone": "europe-west3-c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_network.vpc_network"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "node",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": null,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "enable_confidential_compute": false,
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2204-jammy-v20231030",
                    "labels": {},
                    "provisioned_iops": 0,
                    "provisioned_throughput": 0,
                    "resource_manager_tags": null,
                    "size": 40,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/csb-2023/zones/europe-west3-c/disks/node1"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "effective_labels": {},
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/csb-2023/zones/europe-west3-c/instances/node1",
            "instance_id": "6465949439070491660",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "e2-standard-2",
            "metadata": null,
            "metadata_fingerprint": "S41rEHkgUZI=",
            "metadata_startup_script": "#!/bin/bash\n\nsudo apt update -y -q\n\n#sudo apt install rabbitmq-server -y -q\n\nsudo apt-get update \nsudo apt-get upgrade -y\nsudo apt-get install curl gnupg -y\nsudo apt-get install apt-transport-https -y\n\n# Install rabbitmq\n\ncurl -1sLf \"https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/com.rabbitmq.team.gpg \u003e /dev/null\n\ncurl -1sLf \"https://keyserver.ubuntu.com/pks/lookup?op=get\u0026search=0xf77f1eda57ebb1cc\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg \u003e /dev/null\n\ncurl -1sLf \"https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/io.packagecloud.rabbitmq.gpg \u003e /dev/null\n\n\ndistribution_name=\"jammy\"\n\n# Specify the file path\nfile_path=\"/etc/apt/sources.list.d/rabbitmq.list\"\n\n# Content to be copied into the file\ncontent=\"# Source repository definition example.\n\n## Provides modern Erlang/OTP releases\n##\n## \\\"$distribution_name\\\" as distribution name should work for any reasonably recent Ubuntu or Debian release.\n## See the release to distribution mapping table in RabbitMQ doc guides to learn more.\ndeb [signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu $distribution_name main\ndeb-src [signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu $distribution_name main\n\n## Provides RabbitMQ\n##\n## \\\"$distribution_name\\\" as distribution name should work for any reasonably recent Ubuntu or Debian release.\n## See the release to distribution mapping table in RabbitMQ doc guides to learn more.\ndeb [signed-by=/usr/share/keyrings/io.packagecloud.rabbitmq.gpg] https://packagecloud.io/rabbitmq/rabbitmq-server/ubuntu/ $distribution_name main\ndeb-src [signed-by=/usr/share/keyrings/io.packagecloud.rabbitmq.gpg] https://packagecloud.io/rabbitmq/rabbitmq-server/ubuntu/ $distribution_name main\"\n\n# Open the file with the preferred text editor (vi in this case)\nvi \"$file_path\" \u003c\u003cEOF\n$content\nEOF\n\necho \"Content has been added to $file_path\"\n\nsudo apt-get update -y\n\nsudo apt-get install -y erlang-base erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key erlang-runtime-tools erlang-snmp erlang-ssl erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl\n\nsudo apt-get install rabbitmq-server -y --fix-missing\n\nsudo systemctl is-enabled rabbitmq-server\n\nsudo systemctl status rabbitmq-server\n\nsudo rabbitmq-plugins enable rabbitmq_management\n\nsudo systemctl restart rabbitmq-server\n\n#open ports\n\nsudo ufw allow OpenSSH\n\nsudo ufw enable\n\nsudo ufw allow 15672/tcp\nsudo ufw allow 5672/tcp\nsudo ufw allow 4369/tcp\nsudo ufw allow 25672/tcp\nsudo ufw allow 15692/tcp\nsudo ufw reload\n\nsudo ufw allow proto tcp from any to any port 5672,15672,15692\n\n\n\n\n# Define the new content\ncookie=\"OJhz25F2ODxAdcaZZ6Hv8ZDUvo3SEBFlpE5x8FCbJP4EIf7xigiSURsR\"\n\n# Specify the file path\nfile_path=\"/var/lib/rabbitmq/.erlang.cookie\"\n\n# Check if the file exists\nif [ -e \"$file_path\" ]; then\n    # Replace the content of the file\n    echo \"$cookie\" \u003e \"$file_path\"\n    echo \"Content of $file_path has been replaced.\"\nelse\n    echo \"Error: File $file_path not found.\"\nfi\n\n\nsudo systemctl restart rabbitmq-server\nsleep 5\nsudo rabbitmqctl stop_app\n\nsleep 5\nsudo rabbitmqctl join_cluster rabbit@node0\nsleep 5\nsudo rabbitmqctl start_app\n\nsleep 5\n\nsudo systemctl restart rabbitmq-server\nsleep 5\nsudo rabbitmqctl stop_app\n\nsleep 5\nsudo rabbitmqctl join_cluster rabbit@node0\nsleep 5\nsudo rabbitmqctl start_app\n\nsudo rabbitmq-plugins enable rabbitmq_prometheus\n\ntouch /prepy\n\nsudo apt install python3-pip -y\n\ntouch /pip\nsudo pip3 install Flask \n\ntouch /flask\n\n# Add failure injector \nsudo ufw allow 5000/tcp\n\n\n# Add failure injector\nflaskapi=$(cat \u003c\u003cEOL\nfrom flask import Flask, request, send_file\nimport subprocess\nimport logging\nimport threading\nimport time\nimport os  # Import os module\nfrom datetime import datetime\n\napp = Flask(__name__)\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# Global variable for the monitoring thread\n# Global variables for monitoring\nmonitoring_thread = None\nmonitoring_active = False\n\ndef check_rabbitmq_status():\n    try:\n        result = subprocess.run([\"sudo\", \"systemctl\", \"is-active\", \"rabbitmq-server\"], \n                                capture_output=True, text=True, check=True)\n        return result.stdout.strip()\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Error checking RabbitMQ status: {e}\")\n        return \"unknown\"\n\ndef start_rabbitmq_service():\n    try:\n        subprocess.run([\"sudo\", \"systemctl\", \"start\", \"rabbitmq-server\"], check=True)\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to start RabbitMQ: {e}\")\n\ndef monitor_rabbitmq():\n    global monitoring_active\n    while monitoring_active:\n        status = check_rabbitmq_status()\n        with open(\"rabbitmq_monitor.log\", \"a\") as file:\n            file.write(f\"{datetime.now()} - RabbitMQ status: {status}\\n\")\n        if status != \"active\":\n            app.logger.info(\"RabbitMQ is down. Attempting to start...\")\n            start_rabbitmq_service()\n            app.logger.info(\"RabbitMQ started\")\n        time.sleep(1)\n\n@app.route('/start-monitoring', methods=['GET'])\ndef start_monitoring():\n    global monitoring_thread, monitoring_active\n\n    # Delete existing log file if it exists\n    log_file_path = \"rabbitmq_monitor.log\"\n    if os.path.exists(log_file_path):\n        os.remove(log_file_path)\n\n    if monitoring_thread is None or not monitoring_thread.is_alive():\n        monitoring_active = True\n        monitoring_thread = threading.Thread(target=monitor_rabbitmq)\n        monitoring_thread.start()\n        return \"Monitoring started\", 200\n    else:\n        return \"Monitoring is already running\", 400\n\n\n@app.route('/stop-monitoring', methods=['GET'])\ndef stop_monitoring():\n    global monitoring_active, monitoring_thread\n\n    if monitoring_thread is None or not monitoring_thread.is_alive():\n        return \"Monitoring is not running\", 400\n\n    monitoring_active = False\n\n    # Wait for the monitoring thread to finish\n    if monitoring_thread.is_alive():\n        monitoring_thread.join()\n\n    log_file_path = \"rabbitmq_monitor.log\"\n    if os.path.exists(log_file_path):\n        return send_file(log_file_path, as_attachment=True)\n    else:\n        return \"Log file does not exist\", 404\n\n\n@app.route('/start-rabbitmq', methods=['GET'])\ndef start_rabbitmq():\n    app.logger.info(f\"Accessed /start-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        subprocess.run([\"sudo\", \"systemctl\", \"start\", \"rabbitmq-server\"], check=True)\n        return \"RabbitMQ started\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to start RabbitMQ: {e}\")\n        return f\"Error: {e}\", 500\n\napp.route('/stop-rabbitmq', methods=['GET'])\ndef stop_rabbitmq():\n    app.logger.info(f\"Accessed /stop-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        subprocess.run([\"sudo\", \"systemctl\", \"stop\", \"rabbitmq-server\"], check=True)\n        return \"RabbitMQ stopped\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to stop RabbitMQ: {e}\")\n        return f\"Error: {e}\", 500\n\n@app.route('/kill-rabbitmq', methods=['GET'])\ndef kill_rabbitmq():\n    app.logger.info(f\"Accessed /kill-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        # Find and kill the RabbitMQ process\n        kill_result = subprocess.run([\"sudo\", \"pkill\", \"-9\", \"beam.smp\"], check=True)\n        return \"RabbitMQ process killed\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to kill RabbitMQ process: {e}\")\n        return f\"Error: {e}\", 500\n\n@app.route('/restart-rabbitmq', methods=['GET'])\ndef restart_rabbitmq():\n    app.logger.info(f\"Accessed /restart-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        # Restart the RabbitMQ service\n        subprocess.run([\"sudo\", \"systemctl\", \"restart\", \"rabbitmq-server\"], check=True)\n        return \"RabbitMQ service restarted\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to restart RabbitMQ: {e}\")\n        return f\"Error: {e}\", 500\n\n\n@app.route('/health', methods=['GET'])\ndef health_check():\n    status = check_rabbitmq_status()\n    return f\"RabbitMQ status: {status}\", 200\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n\n\n\nEOL\n)\n\n# Replace the file content\necho \"$flaskapi\" \u003e \"server.py\"\n\nsudo ufw allow 5000/tcp\n\npython3 server.py\n\n\ntouch /complete",
            "min_cpu_platform": "",
            "name": "node1",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "35.242.221.35",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "internal_ipv6_prefix_length": 0,
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "ipv6_address": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/csb-2023/global/networks/rabbitmq-network",
                "network_ip": "10.156.0.5",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/csb-2023/regions/europe-west3/subnetworks/rabbitmq-network",
                "subnetwork_project": "csb-2023"
              }
            ],
            "network_performance_config": [],
            "params": [],
            "project": "csb-2023",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "instance_termination_action": "",
                "local_ssd_recovery_timeout": [],
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/csb-2023/zones/europe-west3-c/instances/node1",
            "service_account": [],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": null,
            "tags_fingerprint": "42WmSpB8rSM=",
            "terraform_labels": {},
            "timeouts": null,
            "zone": "europe-west3-c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_network.vpc_network"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": null,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "enable_confidential_compute": false,
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2204-jammy-v20231030",
                    "labels": {},
                    "provisioned_iops": 0,
                    "provisioned_throughput": 0,
                    "resource_manager_tags": null,
                    "size": 40,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/csb-2023/zones/europe-west3-c/disks/node2"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "AMD Rome",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "effective_labels": {},
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/csb-2023/zones/europe-west3-c/instances/node2",
            "instance_id": "1236557697964233740",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "e2-standard-2",
            "metadata": null,
            "metadata_fingerprint": "S41rEHkgUZI=",
            "metadata_startup_script": "#!/bin/bash\n\nsudo apt update -y -q\n\n#sudo apt install rabbitmq-server -y -q\n\nsudo apt-get update \nsudo apt-get upgrade -y\nsudo apt-get install curl gnupg -y\nsudo apt-get install apt-transport-https -y\n\n# Install rabbitmq\n\ncurl -1sLf \"https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/com.rabbitmq.team.gpg \u003e /dev/null\n\ncurl -1sLf \"https://keyserver.ubuntu.com/pks/lookup?op=get\u0026search=0xf77f1eda57ebb1cc\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg \u003e /dev/null\n\ncurl -1sLf \"https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/io.packagecloud.rabbitmq.gpg \u003e /dev/null\n\n\ndistribution_name=\"jammy\"\n\n# Specify the file path\nfile_path=\"/etc/apt/sources.list.d/rabbitmq.list\"\n\n# Content to be copied into the file\ncontent=\"# Source repository definition example.\n\n## Provides modern Erlang/OTP releases\n##\n## \\\"$distribution_name\\\" as distribution name should work for any reasonably recent Ubuntu or Debian release.\n## See the release to distribution mapping table in RabbitMQ doc guides to learn more.\ndeb [signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu $distribution_name main\ndeb-src [signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu $distribution_name main\n\n## Provides RabbitMQ\n##\n## \\\"$distribution_name\\\" as distribution name should work for any reasonably recent Ubuntu or Debian release.\n## See the release to distribution mapping table in RabbitMQ doc guides to learn more.\ndeb [signed-by=/usr/share/keyrings/io.packagecloud.rabbitmq.gpg] https://packagecloud.io/rabbitmq/rabbitmq-server/ubuntu/ $distribution_name main\ndeb-src [signed-by=/usr/share/keyrings/io.packagecloud.rabbitmq.gpg] https://packagecloud.io/rabbitmq/rabbitmq-server/ubuntu/ $distribution_name main\"\n\n# Open the file with the preferred text editor (vi in this case)\nvi \"$file_path\" \u003c\u003cEOF\n$content\nEOF\n\necho \"Content has been added to $file_path\"\n\nsudo apt-get update -y\n\nsudo apt-get install -y erlang-base erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key erlang-runtime-tools erlang-snmp erlang-ssl erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl\n\nsudo apt-get install rabbitmq-server -y --fix-missing\n\nsudo systemctl is-enabled rabbitmq-server\n\nsudo systemctl status rabbitmq-server\n\nsudo rabbitmq-plugins enable rabbitmq_management\n\nsudo systemctl restart rabbitmq-server\n\n#open ports\n\nsudo ufw allow OpenSSH\n\nsudo ufw enable\n\nsudo ufw allow 15672/tcp\nsudo ufw allow 5672/tcp\nsudo ufw allow 4369/tcp\nsudo ufw allow 25672/tcp\nsudo ufw allow 15692/tcp\nsudo ufw reload\n\nsudo ufw allow proto tcp from any to any port 5672,15672,15692\n\n\n\n\n# Define the new content\ncookie=\"OJhz25F2ODxAdcaZZ6Hv8ZDUvo3SEBFlpE5x8FCbJP4EIf7xigiSURsR\"\n\n# Specify the file path\nfile_path=\"/var/lib/rabbitmq/.erlang.cookie\"\n\n# Check if the file exists\nif [ -e \"$file_path\" ]; then\n    # Replace the content of the file\n    echo \"$cookie\" \u003e \"$file_path\"\n    echo \"Content of $file_path has been replaced.\"\nelse\n    echo \"Error: File $file_path not found.\"\nfi\n\n\nsudo systemctl restart rabbitmq-server\nsleep 5\nsudo rabbitmqctl stop_app\n\nsleep 5\nsudo rabbitmqctl join_cluster rabbit@node0\nsleep 5\nsudo rabbitmqctl start_app\n\nsleep 5\n\nsudo systemctl restart rabbitmq-server\nsleep 5\nsudo rabbitmqctl stop_app\n\nsleep 5\nsudo rabbitmqctl join_cluster rabbit@node0\nsleep 5\nsudo rabbitmqctl start_app\n\nsudo rabbitmq-plugins enable rabbitmq_prometheus\n\ntouch /prepy\n\nsudo apt install python3-pip -y\n\ntouch /pip\nsudo pip3 install Flask \n\ntouch /flask\n\n# Add failure injector \nsudo ufw allow 5000/tcp\n\n\n# Add failure injector\nflaskapi=$(cat \u003c\u003cEOL\nfrom flask import Flask, request, send_file\nimport subprocess\nimport logging\nimport threading\nimport time\nimport os  # Import os module\nfrom datetime import datetime\n\napp = Flask(__name__)\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# Global variable for the monitoring thread\n# Global variables for monitoring\nmonitoring_thread = None\nmonitoring_active = False\n\ndef check_rabbitmq_status():\n    try:\n        result = subprocess.run([\"sudo\", \"systemctl\", \"is-active\", \"rabbitmq-server\"], \n                                capture_output=True, text=True, check=True)\n        return result.stdout.strip()\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Error checking RabbitMQ status: {e}\")\n        return \"unknown\"\n\ndef start_rabbitmq_service():\n    try:\n        subprocess.run([\"sudo\", \"systemctl\", \"start\", \"rabbitmq-server\"], check=True)\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to start RabbitMQ: {e}\")\n\ndef monitor_rabbitmq():\n    global monitoring_active\n    while monitoring_active:\n        status = check_rabbitmq_status()\n        with open(\"rabbitmq_monitor.log\", \"a\") as file:\n            file.write(f\"{datetime.now()} - RabbitMQ status: {status}\\n\")\n        if status != \"active\":\n            app.logger.info(\"RabbitMQ is down. Attempting to start...\")\n            start_rabbitmq_service()\n            app.logger.info(\"RabbitMQ started\")\n        time.sleep(1)\n\n@app.route('/start-monitoring', methods=['GET'])\ndef start_monitoring():\n    global monitoring_thread, monitoring_active\n\n    # Delete existing log file if it exists\n    log_file_path = \"rabbitmq_monitor.log\"\n    if os.path.exists(log_file_path):\n        os.remove(log_file_path)\n\n    if monitoring_thread is None or not monitoring_thread.is_alive():\n        monitoring_active = True\n        monitoring_thread = threading.Thread(target=monitor_rabbitmq)\n        monitoring_thread.start()\n        return \"Monitoring started\", 200\n    else:\n        return \"Monitoring is already running\", 400\n\n\n@app.route('/stop-monitoring', methods=['GET'])\ndef stop_monitoring():\n    global monitoring_active, monitoring_thread\n\n    if monitoring_thread is None or not monitoring_thread.is_alive():\n        return \"Monitoring is not running\", 400\n\n    monitoring_active = False\n\n    # Wait for the monitoring thread to finish\n    if monitoring_thread.is_alive():\n        monitoring_thread.join()\n\n    log_file_path = \"rabbitmq_monitor.log\"\n    if os.path.exists(log_file_path):\n        return send_file(log_file_path, as_attachment=True)\n    else:\n        return \"Log file does not exist\", 404\n\n\n@app.route('/start-rabbitmq', methods=['GET'])\ndef start_rabbitmq():\n    app.logger.info(f\"Accessed /start-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        subprocess.run([\"sudo\", \"systemctl\", \"start\", \"rabbitmq-server\"], check=True)\n        return \"RabbitMQ started\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to start RabbitMQ: {e}\")\n        return f\"Error: {e}\", 500\n\napp.route('/stop-rabbitmq', methods=['GET'])\ndef stop_rabbitmq():\n    app.logger.info(f\"Accessed /stop-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        subprocess.run([\"sudo\", \"systemctl\", \"stop\", \"rabbitmq-server\"], check=True)\n        return \"RabbitMQ stopped\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to stop RabbitMQ: {e}\")\n        return f\"Error: {e}\", 500\n\n@app.route('/kill-rabbitmq', methods=['GET'])\ndef kill_rabbitmq():\n    app.logger.info(f\"Accessed /kill-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        # Find and kill the RabbitMQ process\n        kill_result = subprocess.run([\"sudo\", \"pkill\", \"-9\", \"beam.smp\"], check=True)\n        return \"RabbitMQ process killed\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to kill RabbitMQ process: {e}\")\n        return f\"Error: {e}\", 500\n\n@app.route('/restart-rabbitmq', methods=['GET'])\ndef restart_rabbitmq():\n    app.logger.info(f\"Accessed /restart-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        # Restart the RabbitMQ service\n        subprocess.run([\"sudo\", \"systemctl\", \"restart\", \"rabbitmq-server\"], check=True)\n        return \"RabbitMQ service restarted\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to restart RabbitMQ: {e}\")\n        return f\"Error: {e}\", 500\n\n\n@app.route('/health', methods=['GET'])\ndef health_check():\n    status = check_rabbitmq_status()\n    return f\"RabbitMQ status: {status}\", 200\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n\n\n\nEOL\n)\n\n# Replace the file content\necho \"$flaskapi\" \u003e \"server.py\"\n\nsudo ufw allow 5000/tcp\n\npython3 server.py\n\n\ntouch /complete",
            "min_cpu_platform": "",
            "name": "node2",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "34.141.55.235",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "internal_ipv6_prefix_length": 0,
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "ipv6_address": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/csb-2023/global/networks/rabbitmq-network",
                "network_ip": "10.156.0.4",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/csb-2023/regions/europe-west3/subnetworks/rabbitmq-network",
                "subnetwork_project": "csb-2023"
              }
            ],
            "network_performance_config": [],
            "params": [],
            "project": "csb-2023",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "instance_termination_action": "",
                "local_ssd_recovery_timeout": [],
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/csb-2023/zones/europe-west3-c/instances/node2",
            "service_account": [],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": null,
            "tags_fingerprint": "42WmSpB8rSM=",
            "terraform_labels": {},
            "timeouts": null,
            "zone": "europe-west3-c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_network.vpc_network"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "node0",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": null,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "enable_confidential_compute": false,
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2204-jammy-v20231030",
                    "labels": {},
                    "provisioned_iops": 0,
                    "provisioned_throughput": 0,
                    "resource_manager_tags": null,
                    "size": 40,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/csb-2023/zones/europe-west3-c/disks/node0"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "effective_labels": {},
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/csb-2023/zones/europe-west3-c/instances/node0",
            "instance_id": "4727707850039546892",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "e2-standard-2",
            "metadata": null,
            "metadata_fingerprint": "bz1zyHbgj6w=",
            "metadata_startup_script": "#!/bin/bash\n\nsudo apt update -y -q\n\n\nsudo apt-get update -q\nsudo apt-get upgrade -y -q\nsudo apt-get install curl gnupg -y -q\nsudo apt-get install apt-transport-https -y -q\n\n# Install Rabbitmq\ncurl -1sLf \"https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/com.rabbitmq.team.gpg \u003e /dev/null\n\ncurl -1sLf \"https://keyserver.ubuntu.com/pks/lookup?op=get\u0026search=0xf77f1eda57ebb1cc\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg \u003e /dev/null\n\ncurl -1sLf \"https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/io.packagecloud.rabbitmq.gpg \u003e /dev/null\n\n# Specify the distribution name \ndistribution_name=\"jammy\"\n\n# Specify the file path\nfile_path=\"/etc/apt/sources.list.d/rabbitmq.list\"\n\n# Content to be copied into the file\ncontent=\"# Source repository definition example.\n\n## Provides modern Erlang/OTP releases\n##\n## \\\"$distribution_name\\\" as distribution name should work for any reasonably recent Ubuntu or Debian release.\n## See the release to distribution mapping table in RabbitMQ doc guides to learn more.\ndeb [signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu $distribution_name main\ndeb-src [signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu $distribution_name main\n\n## Provides RabbitMQ\n##\n## \\\"$distribution_name\\\" as distribution name should work for any reasonably recent Ubuntu or Debian release.\n## See the release to distribution mapping table in RabbitMQ doc guides to learn more.\ndeb [signed-by=/usr/share/keyrings/io.packagecloud.rabbitmq.gpg] https://packagecloud.io/rabbitmq/rabbitmq-server/ubuntu/ $distribution_name main\ndeb-src [signed-by=/usr/share/keyrings/io.packagecloud.rabbitmq.gpg] https://packagecloud.io/rabbitmq/rabbitmq-server/ubuntu/ $distribution_name main\"\n\n\nvi \"$file_path\" \u003c\u003cEOF\n$content\nEOF\n\necho \"Content has been added to $file_path\"\n\n\n\nsudo apt-get install -y erlang-base erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key erlang-runtime-tools erlang-snmp erlang-ssl erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl -q\n\nsudo apt-get install rabbitmq-server -y --fix-missing -q\n\n# Start rabbitmq\n\nsudo systemctl is-enabled rabbitmq-server\n\nsudo systemctl status rabbitmq-server\n\nsudo rabbitmq-plugins enable rabbitmq_management\n\nsudo systemctl restart rabbitmq-server\n\n# open ports\n\nsudo ufw allow OpenSSH\n\nsudo ufw enable\n\nsudo ufw allow 15672/tcp\nsudo ufw allow 5672/tcp\nsudo ufw allow 4369/tcp\nsudo ufw allow 25672/tcp\nsudo ufw allow 15692/tcp\nsudo ufw allow 3000/tcp\nsudo ufw allow 9090/tcp\nsudo ufw reload\n\nsudo ufw allow proto tcp from any to any port 5672,15672,15692, 9090\n\n\n# Replace erlang cookie to connect all node with the masternode\n\n# Define the new content\ncookie=\"OJhz25F2ODxAdcaZZ6Hv8ZDUvo3SEBFlpE5x8FCbJP4EIf7xigiSURsR\"\n\n# Specify the file path\nfile_path=\"/var/lib/rabbitmq/.erlang.cookie\"\n\n# Check if the file exists\nif [ -e \"$file_path\" ]; then\n    # Replace the content of the file\n    echo \"$cookie\" | sudo tee \"$file_path\" \u003e /dev/null\n    echo \"Content of $file_path has been replaced.\"\nelse\n    echo \"Error: File $file_path not found.\"\nfi\n\ntouch /doneCookieSend\n\n# Restart rabbitmq \n\nsudo systemctl restart rabbitmq-server\n\nsudo rabbitmqctl cluster_status\n\n# Create user \"rabbitmq\" with password \"password\"\nsudo rabbitmqctl add_user rabbitmq password\n\nsudo rabbitmqctl set_user_tags rabbitmq administrator\n\nsudo rabbitmqctl set_permissions -p / rabbitmq \".*\" \".*\" \".*\"\n\nsudo rabbitmqctl delete_user guest\n\nsudo rabbitmqctl list_users\n\nsudo rabbitmqctl set_policy ha-all \".*\" '{\"ha-mode\":\"all\", \"queue-mode\": \"lazy\", \"ha-promote-on-shutdown\": \"always\", \"ha-promote-on-failure\": \"always\" }'\n\nsudo rabbitmq-plugins enable rabbitmq_prometheus\n\n\n\n\nsudo apt-get remove needrestart\n\nsudo apt install python3-pip -y\n\ntouch /pip\nsudo pip3 install Flask \n\ntouch /flask\n\n# Add failure injector \nsudo ufw allow 5000/tcp\n\n\n# Add failure injector\nflaskapi=$(cat \u003c\u003cEOL\nfrom flask import Flask, request, send_file\nimport subprocess\nimport logging\nimport threading\nimport time\nimport os  # Import os module\nfrom datetime import datetime\n\napp = Flask(__name__)\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# Global variable for the monitoring thread\n# Global variables for monitoring\nmonitoring_thread = None\nmonitoring_active = False\n\ndef check_rabbitmq_status():\n    try:\n        result = subprocess.run([\"sudo\", \"systemctl\", \"is-active\", \"rabbitmq-server\"], \n                                capture_output=True, text=True, check=True)\n        return result.stdout.strip()\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Error checking RabbitMQ status: {e}\")\n        return \"unknown\"\n\ndef start_rabbitmq_service():\n    try:\n        subprocess.run([\"sudo\", \"systemctl\", \"start\", \"rabbitmq-server\"], check=True)\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to start RabbitMQ: {e}\")\n\ndef monitor_rabbitmq():\n    global monitoring_active\n    while monitoring_active:\n        status = check_rabbitmq_status()\n        with open(\"rabbitmq_monitor.log\", \"a\") as file:\n            file.write(f\"{datetime.now()} - RabbitMQ status: {status}\\n\")\n        if status != \"active\":\n            app.logger.info(\"RabbitMQ is down. Attempting to start...\")\n            start_rabbitmq_service()\n            app.logger.info(\"RabbitMQ started\")\n        time.sleep(1)\n\n@app.route('/start-monitoring', methods=['GET'])\ndef start_monitoring():\n    global monitoring_thread, monitoring_active\n\n    # Delete existing log file if it exists\n    log_file_path = \"rabbitmq_monitor.log\"\n    if os.path.exists(log_file_path):\n        os.remove(log_file_path)\n\n    if monitoring_thread is None or not monitoring_thread.is_alive():\n        monitoring_active = True\n        monitoring_thread = threading.Thread(target=monitor_rabbitmq)\n        monitoring_thread.start()\n        return \"Monitoring started\", 200\n    else:\n        return \"Monitoring is already running\", 400\n\n\n@app.route('/stop-monitoring', methods=['GET'])\ndef stop_monitoring():\n    global monitoring_active, monitoring_thread\n\n    if monitoring_thread is None or not monitoring_thread.is_alive():\n        return \"Monitoring is not running\", 400\n\n    monitoring_active = False\n\n    # Wait for the monitoring thread to finish\n    if monitoring_thread.is_alive():\n        monitoring_thread.join()\n\n    log_file_path = \"rabbitmq_monitor.log\"\n    if os.path.exists(log_file_path):\n        return send_file(log_file_path, as_attachment=True)\n    else:\n        return \"Log file does not exist\", 404\n\n\n@app.route('/start-rabbitmq', methods=['GET'])\ndef start_rabbitmq():\n    app.logger.info(f\"Accessed /start-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        subprocess.run([\"sudo\", \"systemctl\", \"start\", \"rabbitmq-server\"], check=True)\n        return \"RabbitMQ started\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to start RabbitMQ: {e}\")\n        return f\"Error: {e}\", 500\n\napp.route('/stop-rabbitmq', methods=['GET'])\ndef stop_rabbitmq():\n    app.logger.info(f\"Accessed /stop-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        subprocess.run([\"sudo\", \"systemctl\", \"stop\", \"rabbitmq-server\"], check=True)\n        return \"RabbitMQ stopped\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to stop RabbitMQ: {e}\")\n        return f\"Error: {e}\", 500\n\n@app.route('/kill-rabbitmq', methods=['GET'])\ndef kill_rabbitmq():\n    app.logger.info(f\"Accessed /kill-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        # Find and kill the RabbitMQ process\n        kill_result = subprocess.run([\"sudo\", \"pkill\", \"-9\", \"beam.smp\"], check=True)\n        return \"RabbitMQ process killed\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to kill RabbitMQ process: {e}\")\n        return f\"Error: {e}\", 500\n\n@app.route('/restart-rabbitmq', methods=['GET'])\ndef restart_rabbitmq():\n    app.logger.info(f\"Accessed /restart-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        # Restart the RabbitMQ service\n        subprocess.run([\"sudo\", \"systemctl\", \"restart\", \"rabbitmq-server\"], check=True)\n        return \"RabbitMQ service restarted\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to restart RabbitMQ: {e}\")\n        return f\"Error: {e}\", 500\n\n\n@app.route('/health', methods=['GET'])\ndef health_check():\n    status = check_rabbitmq_status()\n    return f\"RabbitMQ status: {status}\", 200\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n\n\n\nEOL\n)\n\n# Replace the file content\necho \"$flaskapi\" \u003e \"server.py\"\n\nsudo ufw allow 5000/tcp\n\npython3 server.py\n\n\ntouch /complete",
            "min_cpu_platform": "",
            "name": "node0",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "35.246.146.240",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "internal_ipv6_prefix_length": 0,
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "ipv6_address": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/csb-2023/global/networks/rabbitmq-network",
                "network_ip": "10.156.0.6",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/csb-2023/regions/europe-west3/subnetworks/rabbitmq-network",
                "subnetwork_project": "csb-2023"
              }
            ],
            "network_performance_config": [],
            "params": [],
            "project": "csb-2023",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "instance_termination_action": "",
                "local_ssd_recovery_timeout": [],
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/csb-2023/zones/europe-west3-c/instances/node0",
            "service_account": [],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": null,
            "tags_fingerprint": "42WmSpB8rSM=",
            "terraform_labels": {},
            "timeouts": null,
            "zone": "europe-west3-c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_network.vpc_network"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_network",
      "name": "vpc_network",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "auto_create_subnetworks": true,
            "delete_default_routes_on_create": false,
            "description": "",
            "enable_ula_internal_ipv6": false,
            "gateway_ipv4": "",
            "id": "projects/csb-2023/global/networks/rabbitmq-network",
            "internal_ipv6_range": "",
            "mtu": 0,
            "name": "rabbitmq-network",
            "network_firewall_policy_enforcement_order": "AFTER_CLASSIC_FIREWALL",
            "numeric_id": "6770091621081863234",
            "project": "csb-2023",
            "routing_mode": "REGIONAL",
            "self_link": "https://www.googleapis.com/compute/v1/projects/csb-2023/global/networks/rabbitmq-network",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19"
        }
      ]
    }
  ],
  "check_results": null
}
