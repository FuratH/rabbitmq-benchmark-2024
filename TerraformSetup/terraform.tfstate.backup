{
  "version": 4,
  "terraform_version": "1.6.4",
  "serial": 2006,
  "lineage": "83df32cf-0c3e-eb68-7a82-4b203293adc8",
  "outputs": {},
  "resources": [
    {
      "mode": "managed",
      "type": "google_compute_firewall",
      "name": "all",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "allow": [
              {
                "ports": [
                  "0-65535"
                ],
                "protocol": "tcp"
              }
            ],
            "creation_timestamp": "2024-02-03T15:14:56.783-08:00",
            "deny": [],
            "description": "",
            "destination_ranges": [],
            "direction": "INGRESS",
            "disabled": false,
            "enable_logging": null,
            "id": "projects/csb-2023/global/firewalls/allow-all",
            "log_config": [],
            "name": "allow-all",
            "network": "https://www.googleapis.com/compute/v1/projects/csb-2023/global/networks/rabbitmq-network",
            "priority": 1000,
            "project": "csb-2023",
            "self_link": "https://www.googleapis.com/compute/v1/projects/csb-2023/global/firewalls/allow-all",
            "source_ranges": [
              "0.0.0.0/0"
            ],
            "source_service_accounts": null,
            "source_tags": null,
            "target_service_accounts": null,
            "target_tags": null,
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiMSJ9",
          "dependencies": [
            "google_compute_network.vpc_network"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "client",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": null,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2204-jammy-v20231030",
                    "labels": {},
                    "resource_manager_tags": null,
                    "size": 40,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/csb-2023/zones/europe-west3-c/disks/client"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "effective_labels": {},
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/csb-2023/zones/europe-west3-c/instances/client",
            "instance_id": "4300050380048528925",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "e2-highcpu-16",
            "metadata": null,
            "metadata_fingerprint": "C6P-d8OHHG0=",
            "metadata_startup_script": "export DEBIAN_FRONTEND=noninteractive\nsudo apt update -y -q\nsudo apt-get upgrade -y\n\nsudo apt-get remove needrestart -y \n\n# Set the service account key\necho '{\n  \"type\": \"service_account\",\n  \"project_id\": \"csb-2023\",\n  \"private_key_id\": \"7df7302376ddb5d974335f201f0a925d1dcc958b\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDGJhceZHLrW6SX\\nx8ZfA+dVC6XocGdFP53IXhb9l9NxQ4uG3Ew44J3vOGkVycjTF1OcpWPdHfA66GAH\\njW/LU6kl6EHrw67zcNpbMoV3t3uge7MLZeacN1BpiPptsUcB7rxOMe3IBUmHTI3e\\nxs43rYmjtNSzkkQstCfc52hmtkrS3UxjMrT5ZwbWDM8BH5/l6M3Fb3xzLtbgp4Lz\\n8juQ2ibckFmg5rJmm0+JJpPNwsYyauni3onzr2hwkS4XG8tMlCqf2mBfhEZmRhT/\\ngyEuvpwmMgSsdQESodNz4TLqcCE5ZLmBKIbF1Vu058cdvLeBlvysn2l7KpIDWrgy\\n6wcTSiWdAgMBAAECggEAA9zLN5LysIbNSw4gXkrHsB81gTXrtWxbiYPYA+J5Qyxz\\nZFIYBEXQnlClr8CKsx6xyQxqSW2jeKp98Le/laGQWwZPfqaGWwV4pC10b5R6ivLO\\nVysJ10K2xQ/f/dJmVXHPZuDPR0ZfHA2QeGa8r1YpKDFGsidoP8zVOBekr9fe1oRk\\nAwKJ2tTNCRzeBHn+98FMazsyvb8xlMd4l2mrh63grSEB0Taf5UyQj49IN+M+dNt+\\nZrQ8b3MikeTDRQl3rOiBMbbmABsynVAxeMLLqxCR8n2Y9irdhHcvRQRqt1/RtaXc\\nFQHAatHmy1rwQqiHOcIuCYJku+CKjRqpqHfu6Egw2wKBgQDxdIgQBllrq8dt+4MF\\nV8U/RGtVmU5533TA+1PH9K6PndW+O4wwPCW9lPqgKkeRG2zY3Ak3ACpZBs3YNzUR\\nNNAozOQnaPN4fTuXuUSDSMtSMlPfk2wMlIBZ1aMK48dYj37replPvnNGoA6lFHvT\\nbplVcXGWtqY6HSPxHOeBMJ2+JwKBgQDSFbuawWzRlrPEv3jYU17wFq9kSDR2QmpK\\nwvY8CBl7/ZCixCZ8K15z+GlQ4wNN6wQ6ETnkf5RJOGZr24ubQel1tOJw3xSEdvTj\\n4kvBsjOcs7vJkOdaOagXSSOoayYC+/Gul0Z883sCF86wfrmmZXiIu9gbdJsaJkvd\\nzdrEqj5cmwKBgFL2TUHkTJk4Pp/FiXEuhTGF2rNgp5wscTtVn6XWppvmCWkBoNt5\\n7yXCqJKbtFdhavbgM7JYNjS8p8GgxnURBmzeaY44+17s+KrbF3Vcb6/gZv0s9DUm\\nWSuEwi6dsQL22w8h4seJkqYznJSQAzPUjo7TGcpFG7xgAtd3rPuwrqKFAoGAamPx\\nJvUPi7B7B4dDxqGp8YI7fliGoOEPfR7wngQoC7+kkJkvODCqW6aQhxL/6GS9Nj7l\\nB4+IY/A5BiQftheSCDb7edevR0oKyKEgZk49jv0Ce5hzYSDTvD8g3LiuflJi2Vzo\\nqHyRbcTqujzi/Z5jhTNDxNuvdHWyc/g88t2YSUMCgYEAr6/Ru3T+1Lg9PFVx9BR7\\ncaa/T1P8WuPhuRXVfPPpn4w6XP1I8+SxZXNzW58oxbH2NmtMH+Cg9GT763xm0SWL\\ni1Zu4pebJfK8NaFyaYecHQZr1HUlCR41McQ6RTshuvGKXHjyAoI+/zG8T/0o+H83\\n4UfgXJhLw+kKx/hkhK3W8Ho=\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"57939934652-compute@developer.gserviceaccount.com\",\n  \"client_id\": \"113230140637509580628\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/57939934652-compute%40developer.gserviceaccount.com\",\n  \"universe_domain\": \"googleapis.com\"\n}' \u003e /tmp/service-account-key.json\n\n\nexport GOOGLE_APPLICATION_CREDENTIALS=\"/tmp/service-account-key.json\"\n\n# Authenticate with the service account\ngcloud auth activate-service-account --key-file=/tmp/service-account-key.json\n\n\n# Install Java \nsudo apt install openjdk-11-jre-headless -y\n\n# Get benchmarking tool\ngit clone https://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@github.com/FuratH/RabbitMQ-Benchmark.git\n\n\n# Create script to run client\necho '\nsudo java -jar RabbitMQ-Benchmark/target/rabbitmq-benchmark-1.0.0-jar-with-dependencies.jar RabbitMQ-Benchmark/src/main/java/benchmark/config.yaml\n' \u003e /run.sh\n\nsudo chmod +x run.sh\n\ntouch /done\n",
            "min_cpu_platform": "",
            "name": "client",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "35.234.101.228",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "internal_ipv6_prefix_length": 0,
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "ipv6_address": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/csb-2023/global/networks/rabbitmq-network",
                "network_ip": "10.156.0.5",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/csb-2023/regions/europe-west3/subnetworks/rabbitmq-network",
                "subnetwork_project": "csb-2023"
              }
            ],
            "network_performance_config": [],
            "params": [],
            "project": "csb-2023",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "instance_termination_action": "",
                "local_ssd_recovery_timeout": [],
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/csb-2023/zones/europe-west3-c/instances/client",
            "service_account": [
              {
                "email": "57939934652-compute@developer.gserviceaccount.com",
                "scopes": [
                  "https://www.googleapis.com/auth/cloud-platform"
                ]
              }
            ],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": null,
            "tags_fingerprint": "42WmSpB8rSM=",
            "terraform_labels": {},
            "timeouts": null,
            "zone": "europe-west3-c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_network.vpc_network"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "loadbalancer",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": null,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2204-jammy-v20231030",
                    "labels": {},
                    "resource_manager_tags": null,
                    "size": 40,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/csb-2023/zones/europe-west3-c/disks/loadbalancer"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "effective_labels": {},
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/csb-2023/zones/europe-west3-c/instances/loadbalancer",
            "instance_id": "2332561449849943582",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "e2-standard-2",
            "metadata": null,
            "metadata_fingerprint": "Ezz8qc1gR_g=",
            "metadata_startup_script": "#!/bin/bash\n\nsudo apt update -y -q\n\n\n# open ports \nsudo ufw allow 15672/tcp\nsudo ufw allow 5672/tcp\nsudo ufw allow 4369/tcp\nsudo ufw allow 25672/tcp\nsudo ufw allow 15692/tcp\nsudo ufw reload\nsudo ufw allow proto tcp from any to any port 5672,15672,15692\n\n\n# Install Nginx for loadbalancing\nsudo apt-get install nginx -y -q\n\n\n# Replace nginx config \n# If more then 3 nodes are needed, they have to be registered here\nnew_content=$(cat \u003c\u003cEOF\nuser www-data;\nworker_processes auto;\npid /run/nginx.pid;\ninclude /etc/nginx/modules-enabled/*.conf;\n\nevents {\n        worker_connections 768;\n        # multi_accept on;\n}\n\nstream {\n        # List of upstream AMQP connections\n        upstream stream_amqp {\n                least_conn;\n                server node0:5672;\n                server node1:5672;\n                server node2:5672;\n        }\n\n        # List of upstream STOMP connections\n        upstream stream_stomp {\n                least_conn;\n                server node0:61613;\n                server node1:61613;\n                server node2:61613;\n        }\n\n        # AMQP definition\n        server {\n                listen 5672; # the port to listen on this server\n                proxy_pass stream_amqp; # forward traffic to this upstream group\n                proxy_timeout 3s;\n                proxy_connect_timeout 3s;\n        }\n\n        # STOMP definition\n        server {\n                listen 61613; # the port to listen on this server\n                proxy_pass stream_stomp; # forward traffic to this upstream group\n                proxy_timeout 3s;\n                proxy_connect_timeout 3s;\n        }\n}\n\nhttp {\n\n        ##\n        # Basic Settings\n        ##\n\n        sendfile on;\n        tcp_nopush on;\n        types_hash_max_size 2048;\n        # server_tokens off;\n\n        # server_names_hash_bucket_size 64;\n        # server_name_in_redirect off;\n\n        include /etc/nginx/mime.types;\n        default_type application/octet-stream;\n\n        ##\n        # SSL Settings\n        ##\n\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE\n        ssl_prefer_server_ciphers on;\n\n        ##\n        # Logging Settings\n        ##\n\n        access_log /var/log/nginx/access.log;\n        error_log /var/log/nginx/error.log;\n\n        ##\n        # Gzip Settings\n\n\n        gzip on;\n\n        # gzip_vary on;\n        # gzip_proxied any;\n        # gzip_comp_level 6;\n        # gzip_buffers 16 8k;\n        # gzip_http_version 1.1;\n        # gzip_types text/plain text/css application/json application/javascript text/xml application/xml appl\u003e\n\n        ##\n        # Virtual Host Configs\n        ##\n\n        include /etc/nginx/conf.d/*.conf;\n        include /etc/nginx/sites-enabled/*;\n\n        # Define an upstream group for HTTP failover\n        upstream http_backend {\n                least_conn;                  # Use the least connections strategy\n                server node0:15672;          # First backend server\n                server node1:15672;          # Second backend server\n                server node2:15672;          # Third backend server\n                # All servers are treated equally; no backups\n        }\nserver {\n        # listen to the 15672 port on this server\n        listen 15672 default_server;\n\n        # rule on the site root \n        location / {\n                proxy_pass http://http_backend; # Forward traffic to the upstream group\n                proxy_set_header Host \\$host;\n                proxy_set_header X-Real-IP \\$remote_addr;\n                proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n                proxy_set_header X-Forwarded-Proto \\$scheme;\n\n            # Define timeouts (optional, adjust based on your requirements)\n            proxy_connect_timeout       3s;\n            proxy_send_timeout          3s;\n            proxy_read_timeout          3s;\n        }\n\n}\n\n}\nEOF\n)\n\n# Backup the original nginx.conf file\nsudo cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak\n\n# Replace the content of nginx.conf with the new configuration\nsudo echo \"$new_content\" | sudo tee /etc/nginx/nginx.conf \u003e /dev/null\n\nsudo nginx -s reload\n",
            "min_cpu_platform": "",
            "name": "loadbalancer",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "34.141.104.39",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "internal_ipv6_prefix_length": 0,
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "ipv6_address": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/csb-2023/global/networks/rabbitmq-network",
                "network_ip": "10.156.0.4",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/csb-2023/regions/europe-west3/subnetworks/rabbitmq-network",
                "subnetwork_project": "csb-2023"
              }
            ],
            "network_performance_config": [],
            "params": [],
            "project": "csb-2023",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "instance_termination_action": "",
                "local_ssd_recovery_timeout": [],
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/csb-2023/zones/europe-west3-c/instances/loadbalancer",
            "service_account": [],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": null,
            "tags_fingerprint": "42WmSpB8rSM=",
            "terraform_labels": {},
            "timeouts": null,
            "zone": "europe-west3-c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_network.vpc_network"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "node",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": null,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2204-jammy-v20231030",
                    "labels": {},
                    "resource_manager_tags": null,
                    "size": 40,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/csb-2023/zones/europe-west3-c/disks/node1"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "Intel Broadwell",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "effective_labels": {},
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/csb-2023/zones/europe-west3-c/instances/node1",
            "instance_id": "656504115317405213",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "e2-standard-2",
            "metadata": null,
            "metadata_fingerprint": "HwBownAGnio=",
            "metadata_startup_script": "#!/bin/bash\n\nsudo apt update -y -q\n\n#sudo apt install rabbitmq-server -y -q\n\nsudo apt-get update \nsudo apt-get upgrade -y\nsudo apt-get install curl gnupg -y\nsudo apt-get install apt-transport-https -y\n\n# Install rabbitmq\n\ncurl -1sLf \"https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/com.rabbitmq.team.gpg \u003e /dev/null\n\ncurl -1sLf \"https://keyserver.ubuntu.com/pks/lookup?op=get\u0026search=0xf77f1eda57ebb1cc\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg \u003e /dev/null\n\ncurl -1sLf \"https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/io.packagecloud.rabbitmq.gpg \u003e /dev/null\n\n\ndistribution_name=\"jammy\"\n\n# Specify the file path\nfile_path=\"/etc/apt/sources.list.d/rabbitmq.list\"\n\n# Content to be copied into the file\ncontent=\"# Source repository definition example.\n\n## Provides modern Erlang/OTP releases\n##\n## \\\"$distribution_name\\\" as distribution name should work for any reasonably recent Ubuntu or Debian release.\n## See the release to distribution mapping table in RabbitMQ doc guides to learn more.\ndeb [signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu $distribution_name main\ndeb-src [signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu $distribution_name main\n\n## Provides RabbitMQ\n##\n## \\\"$distribution_name\\\" as distribution name should work for any reasonably recent Ubuntu or Debian release.\n## See the release to distribution mapping table in RabbitMQ doc guides to learn more.\ndeb [signed-by=/usr/share/keyrings/io.packagecloud.rabbitmq.gpg] https://packagecloud.io/rabbitmq/rabbitmq-server/ubuntu/ $distribution_name main\ndeb-src [signed-by=/usr/share/keyrings/io.packagecloud.rabbitmq.gpg] https://packagecloud.io/rabbitmq/rabbitmq-server/ubuntu/ $distribution_name main\"\n\n# Open the file with the preferred text editor (vi in this case)\nvi \"$file_path\" \u003c\u003cEOF\n$content\nEOF\n\necho \"Content has been added to $file_path\"\n\nsudo apt-get update -y\n\nsudo apt-get install -y erlang-base erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key erlang-runtime-tools erlang-snmp erlang-ssl erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl\n\nsudo apt-get install rabbitmq-server -y --fix-missing\n\nsudo systemctl is-enabled rabbitmq-server\n\nsudo systemctl status rabbitmq-server\n\nsudo rabbitmq-plugins enable rabbitmq_management\n\nsudo systemctl restart rabbitmq-server\n\n#open ports\n\nsudo ufw allow OpenSSH\n\nsudo ufw enable\n\nsudo ufw allow 15672/tcp\nsudo ufw allow 5672/tcp\nsudo ufw allow 4369/tcp\nsudo ufw allow 25672/tcp\nsudo ufw allow 15692/tcp\nsudo ufw reload\n\nsudo ufw allow proto tcp from any to any port 5672,15672,15692\n\n\n\n\n# Define the new content\ncookie=\"OJhz25F2ODxAdcaZZ6Hv8ZDUvo3SEBFlpE5x8FCbJP4EIf7xigiSURsR\"\n\n# Specify the file path\nfile_path=\"/var/lib/rabbitmq/.erlang.cookie\"\n\n# Check if the file exists\nif [ -e \"$file_path\" ]; then\n    # Replace the content of the file\n    echo \"$cookie\" \u003e \"$file_path\"\n    echo \"Content of $file_path has been replaced.\"\nelse\n    echo \"Error: File $file_path not found.\"\nfi\n\n\nsudo systemctl restart rabbitmq-server\nsleep 5\nsudo rabbitmqctl stop_app\n\nsleep 5\nsudo rabbitmqctl join_cluster rabbit@node0\nsleep 5\nsudo rabbitmqctl start_app\n\nsleep 5\n\nsudo systemctl restart rabbitmq-server\nsleep 5\nsudo rabbitmqctl stop_app\n\nsleep 5\nsudo rabbitmqctl join_cluster rabbit@node0\nsleep 5\nsudo rabbitmqctl start_app\n\nsudo rabbitmq-plugins enable rabbitmq_prometheus\n\ntouch /prepy\n\nsudo apt install python3-pip -y\n\ntouch /pip\nsudo pip3 install Flask \n\ntouch /flask\n\n# Add failure injector\nflaskapi=$(cat \u003c\u003cEOL\nfrom flask import Flask, request, send_file\nimport subprocess\nimport logging\nimport threading\nimport time\nimport os  # Import os module\nfrom datetime import datetime\n\napp = Flask(__name__)\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# Global variable for the monitoring thread\n# Global variables for monitoring\nmonitoring_thread = None\nmonitoring_active = False\n\ndef check_rabbitmq_status():\n    try:\n        result = subprocess.run([\"sudo\", \"systemctl\", \"is-active\", \"rabbitmq-server\"], \n                                capture_output=True, text=True, check=True)\n        return result.stdout.strip()\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Error checking RabbitMQ status: {e}\")\n        return \"unknown\"\n\ndef start_rabbitmq_service():\n    try:\n        subprocess.run([\"sudo\", \"systemctl\", \"start\", \"rabbitmq-server\"], check=True)\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to start RabbitMQ: {e}\")\n\ndef monitor_rabbitmq():\n    global monitoring_active\n    while monitoring_active:\n        status = check_rabbitmq_status()\n        with open(\"rabbitmq_monitor.log\", \"a\") as file:\n            file.write(f\"{datetime.now()} - RabbitMQ status: {status}\\n\")\n        if status != \"active\":\n            app.logger.info(\"RabbitMQ is down. Attempting to start...\")\n            start_rabbitmq_service()\n            app.logger.info(\"RabbitMQ started\")\n        time.sleep(1)\n\n@app.route('/start-monitoring', methods=['GET'])\ndef start_monitoring():\n    global monitoring_thread, monitoring_active\n\n    # Delete existing log file if it exists\n    log_file_path = \"rabbitmq_monitor.log\"\n    if os.path.exists(log_file_path):\n        os.remove(log_file_path)\n\n    if monitoring_thread is None or not monitoring_thread.is_alive():\n        monitoring_active = True\n        monitoring_thread = threading.Thread(target=monitor_rabbitmq)\n        monitoring_thread.start()\n        return \"Monitoring started\", 200\n    else:\n        return \"Monitoring is already running\", 400\n\n\n@app.route('/stop-monitoring', methods=['GET'])\ndef stop_monitoring():\n    global monitoring_active, monitoring_thread\n\n    if monitoring_thread is None or not monitoring_thread.is_alive():\n        return \"Monitoring is not running\", 400\n\n    monitoring_active = False\n\n    # Wait for the monitoring thread to finish\n    if monitoring_thread.is_alive():\n        monitoring_thread.join()\n\n    log_file_path = \"rabbitmq_monitor.log\"\n    if os.path.exists(log_file_path):\n        return send_file(log_file_path, as_attachment=True)\n    else:\n        return \"Log file does not exist\", 404\n\n\n@app.route('/start-rabbitmq', methods=['GET'])\ndef start_rabbitmq():\n    app.logger.info(f\"Accessed /start-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        subprocess.run([\"sudo\", \"systemctl\", \"start\", \"rabbitmq-server\"], check=True)\n        return \"RabbitMQ started\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to start RabbitMQ: {e}\")\n        return f\"Error: {e}\", 500\n\napp.route('/stop-rabbitmq', methods=['GET'])\ndef stop_rabbitmq():\n    app.logger.info(f\"Accessed /stop-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        subprocess.run([\"sudo\", \"systemctl\", \"stop\", \"rabbitmq-server\"], check=True)\n        return \"RabbitMQ stopped\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to stop RabbitMQ: {e}\")\n        return f\"Error: {e}\", 500\n\n@app.route('/kill-rabbitmq', methods=['GET'])\ndef kill_rabbitmq():\n    app.logger.info(f\"Accessed /kill-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        # Find and kill the RabbitMQ process\n        kill_result = subprocess.run([\"sudo\", \"pkill\", \"-9\", \"beam.smp\"], check=True)\n        return \"RabbitMQ process killed\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to kill RabbitMQ process: {e}\")\n        return f\"Error: {e}\", 500\n\n@app.route('/restart-rabbitmq', methods=['GET'])\ndef restart_rabbitmq():\n    app.logger.info(f\"Accessed /restart-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        # Restart the RabbitMQ service\n        subprocess.run([\"sudo\", \"systemctl\", \"restart\", \"rabbitmq-server\"], check=True)\n        return \"RabbitMQ service restarted\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to restart RabbitMQ: {e}\")\n        return f\"Error: {e}\", 500\n\n\n@app.route('/health', methods=['GET'])\ndef health_check():\n    status = check_rabbitmq_status()\n    return f\"RabbitMQ status: {status}\", 200\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n\n\n\nEOL\n)\n\n# Replace the file content\necho \"$flaskapi\" \u003e \"server.py\"\n\nsudo ufw allow 5000/tcp\n\npython3 server.py\n\ntouch /complete",
            "min_cpu_platform": "",
            "name": "node1",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "35.234.100.3",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "internal_ipv6_prefix_length": 0,
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "ipv6_address": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/csb-2023/global/networks/rabbitmq-network",
                "network_ip": "10.156.0.3",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/csb-2023/regions/europe-west3/subnetworks/rabbitmq-network",
                "subnetwork_project": "csb-2023"
              }
            ],
            "network_performance_config": [],
            "params": [],
            "project": "csb-2023",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "instance_termination_action": "",
                "local_ssd_recovery_timeout": [],
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/csb-2023/zones/europe-west3-c/instances/node1",
            "service_account": [],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": null,
            "tags_fingerprint": "42WmSpB8rSM=",
            "terraform_labels": {},
            "timeouts": null,
            "zone": "europe-west3-c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_network.vpc_network"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": null,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2204-jammy-v20231030",
                    "labels": {},
                    "resource_manager_tags": null,
                    "size": 40,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/csb-2023/zones/europe-west3-c/disks/node2"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "AMD Rome",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "effective_labels": {},
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/csb-2023/zones/europe-west3-c/instances/node2",
            "instance_id": "7633261725517837853",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "e2-standard-2",
            "metadata": null,
            "metadata_fingerprint": "HwBownAGnio=",
            "metadata_startup_script": "#!/bin/bash\n\nsudo apt update -y -q\n\n#sudo apt install rabbitmq-server -y -q\n\nsudo apt-get update \nsudo apt-get upgrade -y\nsudo apt-get install curl gnupg -y\nsudo apt-get install apt-transport-https -y\n\n# Install rabbitmq\n\ncurl -1sLf \"https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/com.rabbitmq.team.gpg \u003e /dev/null\n\ncurl -1sLf \"https://keyserver.ubuntu.com/pks/lookup?op=get\u0026search=0xf77f1eda57ebb1cc\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg \u003e /dev/null\n\ncurl -1sLf \"https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/io.packagecloud.rabbitmq.gpg \u003e /dev/null\n\n\ndistribution_name=\"jammy\"\n\n# Specify the file path\nfile_path=\"/etc/apt/sources.list.d/rabbitmq.list\"\n\n# Content to be copied into the file\ncontent=\"# Source repository definition example.\n\n## Provides modern Erlang/OTP releases\n##\n## \\\"$distribution_name\\\" as distribution name should work for any reasonably recent Ubuntu or Debian release.\n## See the release to distribution mapping table in RabbitMQ doc guides to learn more.\ndeb [signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu $distribution_name main\ndeb-src [signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu $distribution_name main\n\n## Provides RabbitMQ\n##\n## \\\"$distribution_name\\\" as distribution name should work for any reasonably recent Ubuntu or Debian release.\n## See the release to distribution mapping table in RabbitMQ doc guides to learn more.\ndeb [signed-by=/usr/share/keyrings/io.packagecloud.rabbitmq.gpg] https://packagecloud.io/rabbitmq/rabbitmq-server/ubuntu/ $distribution_name main\ndeb-src [signed-by=/usr/share/keyrings/io.packagecloud.rabbitmq.gpg] https://packagecloud.io/rabbitmq/rabbitmq-server/ubuntu/ $distribution_name main\"\n\n# Open the file with the preferred text editor (vi in this case)\nvi \"$file_path\" \u003c\u003cEOF\n$content\nEOF\n\necho \"Content has been added to $file_path\"\n\nsudo apt-get update -y\n\nsudo apt-get install -y erlang-base erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key erlang-runtime-tools erlang-snmp erlang-ssl erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl\n\nsudo apt-get install rabbitmq-server -y --fix-missing\n\nsudo systemctl is-enabled rabbitmq-server\n\nsudo systemctl status rabbitmq-server\n\nsudo rabbitmq-plugins enable rabbitmq_management\n\nsudo systemctl restart rabbitmq-server\n\n#open ports\n\nsudo ufw allow OpenSSH\n\nsudo ufw enable\n\nsudo ufw allow 15672/tcp\nsudo ufw allow 5672/tcp\nsudo ufw allow 4369/tcp\nsudo ufw allow 25672/tcp\nsudo ufw allow 15692/tcp\nsudo ufw reload\n\nsudo ufw allow proto tcp from any to any port 5672,15672,15692\n\n\n\n\n# Define the new content\ncookie=\"OJhz25F2ODxAdcaZZ6Hv8ZDUvo3SEBFlpE5x8FCbJP4EIf7xigiSURsR\"\n\n# Specify the file path\nfile_path=\"/var/lib/rabbitmq/.erlang.cookie\"\n\n# Check if the file exists\nif [ -e \"$file_path\" ]; then\n    # Replace the content of the file\n    echo \"$cookie\" \u003e \"$file_path\"\n    echo \"Content of $file_path has been replaced.\"\nelse\n    echo \"Error: File $file_path not found.\"\nfi\n\n\nsudo systemctl restart rabbitmq-server\nsleep 5\nsudo rabbitmqctl stop_app\n\nsleep 5\nsudo rabbitmqctl join_cluster rabbit@node0\nsleep 5\nsudo rabbitmqctl start_app\n\nsleep 5\n\nsudo systemctl restart rabbitmq-server\nsleep 5\nsudo rabbitmqctl stop_app\n\nsleep 5\nsudo rabbitmqctl join_cluster rabbit@node0\nsleep 5\nsudo rabbitmqctl start_app\n\nsudo rabbitmq-plugins enable rabbitmq_prometheus\n\ntouch /prepy\n\nsudo apt install python3-pip -y\n\ntouch /pip\nsudo pip3 install Flask \n\ntouch /flask\n\n# Add failure injector\nflaskapi=$(cat \u003c\u003cEOL\nfrom flask import Flask, request, send_file\nimport subprocess\nimport logging\nimport threading\nimport time\nimport os  # Import os module\nfrom datetime import datetime\n\napp = Flask(__name__)\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# Global variable for the monitoring thread\n# Global variables for monitoring\nmonitoring_thread = None\nmonitoring_active = False\n\ndef check_rabbitmq_status():\n    try:\n        result = subprocess.run([\"sudo\", \"systemctl\", \"is-active\", \"rabbitmq-server\"], \n                                capture_output=True, text=True, check=True)\n        return result.stdout.strip()\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Error checking RabbitMQ status: {e}\")\n        return \"unknown\"\n\ndef start_rabbitmq_service():\n    try:\n        subprocess.run([\"sudo\", \"systemctl\", \"start\", \"rabbitmq-server\"], check=True)\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to start RabbitMQ: {e}\")\n\ndef monitor_rabbitmq():\n    global monitoring_active\n    while monitoring_active:\n        status = check_rabbitmq_status()\n        with open(\"rabbitmq_monitor.log\", \"a\") as file:\n            file.write(f\"{datetime.now()} - RabbitMQ status: {status}\\n\")\n        if status != \"active\":\n            app.logger.info(\"RabbitMQ is down. Attempting to start...\")\n            start_rabbitmq_service()\n            app.logger.info(\"RabbitMQ started\")\n        time.sleep(1)\n\n@app.route('/start-monitoring', methods=['GET'])\ndef start_monitoring():\n    global monitoring_thread, monitoring_active\n\n    # Delete existing log file if it exists\n    log_file_path = \"rabbitmq_monitor.log\"\n    if os.path.exists(log_file_path):\n        os.remove(log_file_path)\n\n    if monitoring_thread is None or not monitoring_thread.is_alive():\n        monitoring_active = True\n        monitoring_thread = threading.Thread(target=monitor_rabbitmq)\n        monitoring_thread.start()\n        return \"Monitoring started\", 200\n    else:\n        return \"Monitoring is already running\", 400\n\n\n@app.route('/stop-monitoring', methods=['GET'])\ndef stop_monitoring():\n    global monitoring_active, monitoring_thread\n\n    if monitoring_thread is None or not monitoring_thread.is_alive():\n        return \"Monitoring is not running\", 400\n\n    monitoring_active = False\n\n    # Wait for the monitoring thread to finish\n    if monitoring_thread.is_alive():\n        monitoring_thread.join()\n\n    log_file_path = \"rabbitmq_monitor.log\"\n    if os.path.exists(log_file_path):\n        return send_file(log_file_path, as_attachment=True)\n    else:\n        return \"Log file does not exist\", 404\n\n\n@app.route('/start-rabbitmq', methods=['GET'])\ndef start_rabbitmq():\n    app.logger.info(f\"Accessed /start-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        subprocess.run([\"sudo\", \"systemctl\", \"start\", \"rabbitmq-server\"], check=True)\n        return \"RabbitMQ started\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to start RabbitMQ: {e}\")\n        return f\"Error: {e}\", 500\n\napp.route('/stop-rabbitmq', methods=['GET'])\ndef stop_rabbitmq():\n    app.logger.info(f\"Accessed /stop-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        subprocess.run([\"sudo\", \"systemctl\", \"stop\", \"rabbitmq-server\"], check=True)\n        return \"RabbitMQ stopped\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to stop RabbitMQ: {e}\")\n        return f\"Error: {e}\", 500\n\n@app.route('/kill-rabbitmq', methods=['GET'])\ndef kill_rabbitmq():\n    app.logger.info(f\"Accessed /kill-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        # Find and kill the RabbitMQ process\n        kill_result = subprocess.run([\"sudo\", \"pkill\", \"-9\", \"beam.smp\"], check=True)\n        return \"RabbitMQ process killed\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to kill RabbitMQ process: {e}\")\n        return f\"Error: {e}\", 500\n\n@app.route('/restart-rabbitmq', methods=['GET'])\ndef restart_rabbitmq():\n    app.logger.info(f\"Accessed /restart-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        # Restart the RabbitMQ service\n        subprocess.run([\"sudo\", \"systemctl\", \"restart\", \"rabbitmq-server\"], check=True)\n        return \"RabbitMQ service restarted\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to restart RabbitMQ: {e}\")\n        return f\"Error: {e}\", 500\n\n\n@app.route('/health', methods=['GET'])\ndef health_check():\n    status = check_rabbitmq_status()\n    return f\"RabbitMQ status: {status}\", 200\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n\n\n\nEOL\n)\n\n# Replace the file content\necho \"$flaskapi\" \u003e \"server.py\"\n\nsudo ufw allow 5000/tcp\n\npython3 server.py\n\ntouch /complete",
            "min_cpu_platform": "",
            "name": "node2",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "34.159.222.181",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "internal_ipv6_prefix_length": 0,
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "ipv6_address": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/csb-2023/global/networks/rabbitmq-network",
                "network_ip": "10.156.0.6",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/csb-2023/regions/europe-west3/subnetworks/rabbitmq-network",
                "subnetwork_project": "csb-2023"
              }
            ],
            "network_performance_config": [],
            "params": [],
            "project": "csb-2023",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "instance_termination_action": "",
                "local_ssd_recovery_timeout": [],
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/csb-2023/zones/europe-west3-c/instances/node2",
            "service_account": [],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": null,
            "tags_fingerprint": "42WmSpB8rSM=",
            "terraform_labels": {},
            "timeouts": null,
            "zone": "europe-west3-c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_network.vpc_network"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_instance",
      "name": "node0",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 6,
          "attributes": {
            "advanced_machine_features": [],
            "allow_stopping_for_update": null,
            "attached_disk": [],
            "boot_disk": [
              {
                "auto_delete": true,
                "device_name": "persistent-disk-0",
                "disk_encryption_key_raw": "",
                "disk_encryption_key_sha256": "",
                "initialize_params": [
                  {
                    "image": "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2204-jammy-v20231030",
                    "labels": {},
                    "resource_manager_tags": null,
                    "size": 40,
                    "type": "pd-standard"
                  }
                ],
                "kms_key_self_link": "",
                "mode": "READ_WRITE",
                "source": "https://www.googleapis.com/compute/v1/projects/csb-2023/zones/europe-west3-c/disks/node0"
              }
            ],
            "can_ip_forward": false,
            "confidential_instance_config": [],
            "cpu_platform": "AMD Rome",
            "current_status": "RUNNING",
            "deletion_protection": false,
            "description": "",
            "desired_status": null,
            "effective_labels": {},
            "enable_display": false,
            "guest_accelerator": [],
            "hostname": "",
            "id": "projects/csb-2023/zones/europe-west3-c/instances/node0",
            "instance_id": "1039928640538899998",
            "label_fingerprint": "42WmSpB8rSM=",
            "labels": null,
            "machine_type": "e2-standard-2",
            "metadata": null,
            "metadata_fingerprint": "R4uTj9YTZMM=",
            "metadata_startup_script": "#!/bin/bash\n\nsudo apt update -y -q\n\n\nsudo apt-get update -q\nsudo apt-get upgrade -y -q\nsudo apt-get install curl gnupg -y -q\nsudo apt-get install apt-transport-https -y -q\n\n# Install Rabbitmq\ncurl -1sLf \"https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/com.rabbitmq.team.gpg \u003e /dev/null\n\ncurl -1sLf \"https://keyserver.ubuntu.com/pks/lookup?op=get\u0026search=0xf77f1eda57ebb1cc\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg \u003e /dev/null\n\ncurl -1sLf \"https://packagecloud.io/rabbitmq/rabbitmq-server/gpgkey\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/io.packagecloud.rabbitmq.gpg \u003e /dev/null\n\n# Specify the distribution name \ndistribution_name=\"jammy\"\n\n# Specify the file path\nfile_path=\"/etc/apt/sources.list.d/rabbitmq.list\"\n\n# Content to be copied into the file\ncontent=\"# Source repository definition example.\n\n## Provides modern Erlang/OTP releases\n##\n## \\\"$distribution_name\\\" as distribution name should work for any reasonably recent Ubuntu or Debian release.\n## See the release to distribution mapping table in RabbitMQ doc guides to learn more.\ndeb [signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu $distribution_name main\ndeb-src [signed-by=/usr/share/keyrings/net.launchpad.ppa.rabbitmq.erlang.gpg] http://ppa.launchpad.net/rabbitmq/rabbitmq-erlang/ubuntu $distribution_name main\n\n## Provides RabbitMQ\n##\n## \\\"$distribution_name\\\" as distribution name should work for any reasonably recent Ubuntu or Debian release.\n## See the release to distribution mapping table in RabbitMQ doc guides to learn more.\ndeb [signed-by=/usr/share/keyrings/io.packagecloud.rabbitmq.gpg] https://packagecloud.io/rabbitmq/rabbitmq-server/ubuntu/ $distribution_name main\ndeb-src [signed-by=/usr/share/keyrings/io.packagecloud.rabbitmq.gpg] https://packagecloud.io/rabbitmq/rabbitmq-server/ubuntu/ $distribution_name main\"\n\n\nvi \"$file_path\" \u003c\u003cEOF\n$content\nEOF\n\necho \"Content has been added to $file_path\"\n\n\n\nsudo apt-get install -y erlang-base erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key erlang-runtime-tools erlang-snmp erlang-ssl erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl -q\n\nsudo apt-get install rabbitmq-server -y --fix-missing -q\n\n# Start rabbitmq\n\nsudo systemctl is-enabled rabbitmq-server\n\nsudo systemctl status rabbitmq-server\n\nsudo rabbitmq-plugins enable rabbitmq_management\n\nsudo systemctl restart rabbitmq-server\n\n# open ports\n\nsudo ufw allow OpenSSH\n\nsudo ufw enable\n\nsudo ufw allow 15672/tcp\nsudo ufw allow 5672/tcp\nsudo ufw allow 4369/tcp\nsudo ufw allow 25672/tcp\nsudo ufw allow 15692/tcp\nsudo ufw allow 3000/tcp\nsudo ufw allow 9090/tcp\nsudo ufw reload\n\nsudo ufw allow proto tcp from any to any port 5672,15672,15692, 9090\n\n\n# Replace erlang cookie to connect all node with the masternode\n\n# Define the new content\ncookie=\"OJhz25F2ODxAdcaZZ6Hv8ZDUvo3SEBFlpE5x8FCbJP4EIf7xigiSURsR\"\n\n# Specify the file path\nfile_path=\"/var/lib/rabbitmq/.erlang.cookie\"\n\n# Check if the file exists\nif [ -e \"$file_path\" ]; then\n    # Replace the content of the file\n    echo \"$cookie\" | sudo tee \"$file_path\" \u003e /dev/null\n    echo \"Content of $file_path has been replaced.\"\nelse\n    echo \"Error: File $file_path not found.\"\nfi\n\ntouch /doneCookieSend\n\n# Restart rabbitmq \n\nsudo systemctl restart rabbitmq-server\n\nsudo rabbitmqctl cluster_status\n\n# Create user \"rabbitmq\" with password \"password\"\nsudo rabbitmqctl add_user rabbitmq password\n\nsudo rabbitmqctl set_user_tags rabbitmq administrator\n\nsudo rabbitmqctl set_permissions -p / rabbitmq \".*\" \".*\" \".*\"\n\nsudo rabbitmqctl delete_user guest\n\nsudo rabbitmqctl list_users\n\nsudo rabbitmqctl set_policy ha-all \".*\" '{\"ha-mode\":\"all\", \"queue-mode\": \"lazy\", \"ha-promote-on-shutdown\": \"always\", \"ha-promote-on-failure\": \"always\" }'\n\nsudo rabbitmq-plugins enable rabbitmq_prometheus\n\n\n\n\nsudo apt-get remove needrestart\n\nsudo apt install python3-pip -y\n\ntouch /pip\nsudo pip3 install Flask \n\ntouch /flask\n\n# Add failure injector \nflaskapi=$(cat \u003c\u003cEOL\nfrom flask import Flask, request, send_file\nimport subprocess\nimport logging\nimport threading\nimport time\nimport os  # Import os module\nfrom datetime import datetime\n\napp = Flask(__name__)\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n# Global variable for the monitoring thread\n# Global variables for monitoring\nmonitoring_thread = None\nmonitoring_active = False\n\ndef check_rabbitmq_status():\n    try:\n        result = subprocess.run([\"sudo\", \"systemctl\", \"is-active\", \"rabbitmq-server\"], \n                                capture_output=True, text=True, check=True)\n        return result.stdout.strip()\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Error checking RabbitMQ status: {e}\")\n        return \"unknown\"\n\ndef start_rabbitmq_service():\n    try:\n        subprocess.run([\"sudo\", \"systemctl\", \"start\", \"rabbitmq-server\"], check=True)\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to start RabbitMQ: {e}\")\n\ndef monitor_rabbitmq():\n    global monitoring_active\n    while monitoring_active:\n        status = check_rabbitmq_status()\n        with open(\"rabbitmq_monitor.log\", \"a\") as file:\n            file.write(f\"{datetime.now()} - RabbitMQ status: {status}\\n\")\n        if status != \"active\":\n            app.logger.info(\"RabbitMQ is down. Attempting to start...\")\n            start_rabbitmq_service()\n        time.sleep(1)\n\n@app.route('/start-monitoring', methods=['GET'])\ndef start_monitoring():\n    global monitoring_thread, monitoring_active\n\n    # Delete existing log file if it exists\n    log_file_path = \"rabbitmq_monitor.log\"\n    if os.path.exists(log_file_path):\n        os.remove(log_file_path)\n\n    if monitoring_thread is None or not monitoring_thread.is_alive():\n        monitoring_active = True\n        monitoring_thread = threading.Thread(target=monitor_rabbitmq)\n        monitoring_thread.start()\n        return \"Monitoring started\", 200\n    else:\n        return \"Monitoring is already running\", 400\n\n\n@app.route('/stop-monitoring', methods=['GET'])\ndef stop_monitoring():\n    global monitoring_active, monitoring_thread\n\n    if monitoring_thread is None or not monitoring_thread.is_alive():\n        return \"Monitoring is not running\", 400\n\n    monitoring_active = False\n\n    # Wait for the monitoring thread to finish\n    if monitoring_thread.is_alive():\n        monitoring_thread.join()\n\n    log_file_path = \"rabbitmq_monitor.log\"\n    if os.path.exists(log_file_path):\n        return send_file(log_file_path, as_attachment=True)\n    else:\n        return \"Log file does not exist\", 404\n\n\n@app.route('/start-rabbitmq', methods=['GET'])\ndef start_rabbitmq():\n    app.logger.info(f\"Accessed /start-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        subprocess.run([\"sudo\", \"systemctl\", \"start\", \"rabbitmq-server\"], check=True)\n        return \"RabbitMQ started\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to start RabbitMQ: {e}\")\n        return f\"Error: {e}\", 500\n\napp.route('/stop-rabbitmq', methods=['GET'])\ndef stop_rabbitmq():\n    app.logger.info(f\"Accessed /stop-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        subprocess.run([\"sudo\", \"systemctl\", \"stop\", \"rabbitmq-server\"], check=True)\n        return \"RabbitMQ stopped\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to stop RabbitMQ: {e}\")\n        return f\"Error: {e}\", 500\n\n@app.route('/kill-rabbitmq', methods=['GET'])\ndef kill_rabbitmq():\n    app.logger.info(f\"Accessed /kill-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        # Find and kill the RabbitMQ process\n        kill_result = subprocess.run([\"sudo\", \"pkill\", \"-9\", \"beam.smp\"], check=True)\n        return \"RabbitMQ process killed\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to kill RabbitMQ process: {e}\")\n        return f\"Error: {e}\", 500\n\n@app.route('/restart-rabbitmq', methods=['GET'])\ndef restart_rabbitmq():\n    app.logger.info(f\"Accessed /restart-rabbitmq - {request.remote_addr} - {datetime.now()}\")\n    try:\n        # Restart the RabbitMQ service\n        subprocess.run([\"sudo\", \"systemctl\", \"restart\", \"rabbitmq-server\"], check=True)\n        return \"RabbitMQ service restarted\", 200\n    except subprocess.CalledProcessError as e:\n        app.logger.error(f\"Failed to restart RabbitMQ: {e}\")\n        return f\"Error: {e}\", 500\n\n\n@app.route('/health', methods=['GET'])\ndef health_check():\n    status = check_rabbitmq_status()\n    return f\"RabbitMQ status: {status}\", 200\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n\n\n\nEOL\n)\n\n# Replace the file content\necho \"$flaskapi\" \u003e \"server.py\"\n\nsudo ufw allow 5000/tcp\n\npython3 server.py\n\n\n\n\ntouch /complete",
            "min_cpu_platform": "",
            "name": "node0",
            "network_interface": [
              {
                "access_config": [
                  {
                    "nat_ip": "34.159.72.217",
                    "network_tier": "PREMIUM",
                    "public_ptr_domain_name": ""
                  }
                ],
                "alias_ip_range": [],
                "internal_ipv6_prefix_length": 0,
                "ipv6_access_config": [],
                "ipv6_access_type": "",
                "ipv6_address": "",
                "name": "nic0",
                "network": "https://www.googleapis.com/compute/v1/projects/csb-2023/global/networks/rabbitmq-network",
                "network_ip": "10.156.0.2",
                "nic_type": "",
                "queue_count": 0,
                "stack_type": "IPV4_ONLY",
                "subnetwork": "https://www.googleapis.com/compute/v1/projects/csb-2023/regions/europe-west3/subnetworks/rabbitmq-network",
                "subnetwork_project": "csb-2023"
              }
            ],
            "network_performance_config": [],
            "params": [],
            "project": "csb-2023",
            "reservation_affinity": [],
            "resource_policies": null,
            "scheduling": [
              {
                "automatic_restart": true,
                "instance_termination_action": "",
                "local_ssd_recovery_timeout": [],
                "min_node_cpus": 0,
                "node_affinities": [],
                "on_host_maintenance": "MIGRATE",
                "preemptible": false,
                "provisioning_model": "STANDARD"
              }
            ],
            "scratch_disk": [],
            "self_link": "https://www.googleapis.com/compute/v1/projects/csb-2023/zones/europe-west3-c/instances/node0",
            "service_account": [],
            "shielded_instance_config": [
              {
                "enable_integrity_monitoring": true,
                "enable_secure_boot": false,
                "enable_vtpm": true
              }
            ],
            "tags": null,
            "tags_fingerprint": "42WmSpB8rSM=",
            "terraform_labels": {},
            "timeouts": null,
            "zone": "europe-west3-c"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH0sInNjaGVtYV92ZXJzaW9uIjoiNiJ9",
          "dependencies": [
            "google_compute_network.vpc_network"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "google_compute_network",
      "name": "vpc_network",
      "provider": "provider[\"registry.terraform.io/hashicorp/google\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "auto_create_subnetworks": true,
            "delete_default_routes_on_create": false,
            "description": "",
            "enable_ula_internal_ipv6": false,
            "gateway_ipv4": "",
            "id": "projects/csb-2023/global/networks/rabbitmq-network",
            "internal_ipv6_range": "",
            "mtu": 0,
            "name": "rabbitmq-network",
            "network_firewall_policy_enforcement_order": "AFTER_CLASSIC_FIREWALL",
            "project": "csb-2023",
            "routing_mode": "REGIONAL",
            "self_link": "https://www.googleapis.com/compute/v1/projects/csb-2023/global/networks/rabbitmq-network",
            "timeouts": null
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjoxMjAwMDAwMDAwMDAwLCJkZWxldGUiOjEyMDAwMDAwMDAwMDAsInVwZGF0ZSI6MTIwMDAwMDAwMDAwMH19"
        }
      ]
    }
  ],
  "check_results": null
}
